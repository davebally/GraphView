// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GraphView
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class NodeTableGraphViewCodeTemplate : NodeTableGraphViewCodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n\r\n");
            
            #line 8 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

var typeDictionary = new Dictionary<string, Tuple<string, string>> 
{
{"int", new Tuple<string, string>("int", "Int32")},
{"long", new Tuple<string, string>("bigint", "Int64")},
{"double", new Tuple<string, string>("float", "Double")},
{"string", new Tuple<string, string>("nvarchar(4000)", "String")},
{"bool", new Tuple<string, string>("bit", "Boolean")}
};

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.IO;\r\nusing System.Collections;\r\nusing System.Collecti" +
                    "ons.Generic;\r\nusing System.Data.SqlTypes;\r\nusing System.Text;\r\nusing Microsoft.S" +
                    "qlServer.Server;\r\n\r\npublic partial class UserDefinedFunctions\r\n{\r\n\t//edge decode" +
                    "r\r\n");
            
            #line 29 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	foreach (var edge in EdgeList) {
	var edgeName = edge.Item1;
	var edgeColumnId = edge.Item2;
	var variables = edge.Item3; //Attribute name and type
	var attributeSize = variables.Count();
	var byteSize = (attributeSize - 1) / 8 + 1; 
		if (attributeSize == 0) {
			byteSize = 0;
	}

            
            #line default
            #line hidden
            this.Write("\tprivate class ");
            
            #line 40 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult\r\n\t{\r\n\t\tpublic long Sink { get; set; }\r\n\t\tpublic Int32 EdgeId{ get; " +
                    "set; }\r\n");
            
            #line 44 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("\t\tpublic Sql");
            
            #line 45 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variable.Item2].Item2));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 45 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 46 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\tpublic static void ");
            
            #line 49 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder_FillRow(\r\n\t\tobject tableTypeObject,\r\n\t\tout SqlInt64 sink, out SqlInt32 ed" +
                    "geid");
            
            #line 51 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	var indent = "		";
	for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write(indent + "out Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
	}
            
            #line default
            #line hidden
            this.Write(")\r\n\t{\r\n\t\tvar decoderResult = (");
            
            #line 59 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult)tableTypeObject;\r\n\t\tsink = decoderResult.Sink;\r\n\t\tedgeid = decoderR" +
                    "esult.EdgeId;\r\n");
            
            #line 62 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("\t  ");
            
            #line 63 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" = decoderResult.");
            
            #line 63 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 64 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\t[SqlFunction(\r\n\t\tDataAccess = DataAccessKind.None,\r\n\t\tTableDefinition = \"S" +
                    "ink bigint, EdgeId int");
            
            #line 69 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

		for (var i = 0; i < variables.Count; ++i)
			Write(", " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
		
            
            #line default
            #line hidden
            this.Write("\",\r\n\t\tFillRowMethodName = \"");
            
            #line 73 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder_FillRow\",\r\n\t\tIsDeterministic = true,\r\n\t\tIsPrecise = false\r\n\t\t)]\r\n\tpublic " +
                    "static IEnumerable ");
            
            #line 77 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"Decoder(SqlBytes array, SqlBytes deleteEdge)
	{
		var deleDict =  new Dictionary<Int32, bool>();
		if (deleteEdge != null && !deleteEdge.IsNull)
		{	
			var delebr = new BinaryReader(deleteEdge.Stream);
			while (delebr.BaseStream.Position != delebr.BaseStream.Length)
			{
				deleDict[delebr.ReadInt32()] = true;
			}
		}
		if (array == null || array.IsNull)
			yield break;
		var br = new BinaryReader(array.Stream);
		var edgeid = (Int32)0;
		if (deleDict.Count == 0)
		{
			while (br.BaseStream.Position != br.BaseStream.Length)
			{
				edgeid++;
			");
            
            #line 97 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\tbyte[] bitmap = br.ReadBytes(");
            
            #line 98 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t");
            
            #line 99 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar sink = br.ReadInt64();\r\n");
            
            #line 101 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

					indent += "    ";
					var count = 0;
					foreach (var variable in variables)
					{
						var variableName = variable.Item1;
						var variableType = variable.Item2;
						var str = "((bitmap["+ (count / 8).ToString() + "]" + " & " + (1 << (count%8)).ToString() + ") == 0)? Sql" + typeDictionary[variableType].Item2 + ".Null" +" :";
						if (attributeSize == 0) {
							str = "";
						}
						WriteLine(indent + "var _" + variableName + " = " + str + "br.Read" + typeDictionary[variableType].Item2 + "();");
						count++;
					}

            
            #line default
            #line hidden
            this.Write("\t\t\t\tyield return new ");
            
            #line 116 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult\r\n\t\t\t\t{\r\n\t\t\t\t\tSink = sink, EdgeId = edgeid,\r\n");
            
            #line 119 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

					indent += "    ";
					for (var i = 0; i < variables.Count; ++i)
					{
						WriteLine(indent + variables[i].Item1 + " = _" + variables[i].Item1 + ",");
					}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\twhile (br.BaseStream.Position != br.BaseStrea" +
                    "m.Length)\r\n\t\t\t{\r\n\t\t\t\tedgeid++;\r\n\t\t\t");
            
            #line 134 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\tbyte[] bitmap = br.ReadBytes(");
            
            #line 135 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t");
            
            #line 136 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar sink = br.ReadInt64();\r\n");
            
            #line 138 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

					indent += "    ";
					count = 0;
					foreach (var variable in variables)
					{
						var variableName = variable.Item1;
						var variableType = variable.Item2;
						var str = "((bitmap["+ (count / 8).ToString() + "]" + " & " + (1 << (count%8)).ToString() + ") == 0)? Sql" + typeDictionary[variableType].Item2 + ".Null" +" :";
						if (attributeSize == 0) {
							str = "";
						}
						WriteLine(indent + "var _" + variableName + " = " + str + "br.Read" + typeDictionary[variableType].Item2 + "();");
						count++;
					}

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (!deleDict.ContainsKey(edgeid)) {\r\n\t\t\t\tyield return new ");
            
            #line 154 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult\r\n\t\t\t\t{\r\n\t\t\t\t\tSink = sink, EdgeId = edgeid,\r\n");
            
            #line 157 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

					indent += "    ";
					for (var i = 0; i < variables.Count; ++i)
					{
						WriteLine(indent + variables[i].Item1 + " = _" + variables[i].Item1 + ",");
					}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//Path Decoder\r\n\tprivate class ");
            
            #line 171 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult \r\n\t{\r\n\t\tpublic int EdgeId{get; set;}\r\n\t\tpublic long " +
                    "EdgeColumnId {get; set;}\r\n\t\tpublic long SinkId{get; set;}\r\n");
            
            #line 176 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("\t\tpublic Sql");
            
            #line 177 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variable.Item2].Item2));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 177 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 178 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\tpublic static void ");
            
            #line 181 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGenerator_FillRow(\r\n\t\tobject tableTypeObject,\r\n\t\tout SqlInt32 EdgeId" +
                    ", out SqlInt64 EdgeColumnId, out SqlInt64 SinkId ");
            
            #line 183 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

		for (var i = 0; i < variables.Count; ++i)
		{
			WriteLine(",");
			Write(indent + "out Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
		}
            
            #line default
            #line hidden
            this.Write("\t\t)\r\n\t{\r\n\t\tvar decoderResult = (");
            
            #line 191 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult)tableTypeObject;\r\n\t\tEdgeId = decoderResult.EdgeId;\r\n" +
                    "\t\tEdgeColumnId =  decoderResult.EdgeColumnId;\r\n\t\tSinkId = decoderResult.SinkId;\r" +
                    "\n");
            
            #line 195 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
foreach (var variable in variables) {
            
            #line default
            #line hidden
            this.Write("\t  ");
            
            #line 196 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(" = decoderResult.");
            
            #line 196 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Item1));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 197 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n\t\r\n\t\t[SqlFunction(\r\n\t\tDataAccess = DataAccessKind.None,\r\n\t\tTableDefinition = " +
                    "\"EdgeId int, EdgeColumnId bigint, SinkId bigint\",\r\n\t\tFillRowMethodName = \"");
            
            #line 203 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGenerator_FillRow\",\r\n\t\tIsDeterministic = true,\r\n\t\tIsPrecise = false\r" +
                    "\n\t\t)]\r\n\tpublic static IEnumerable ");
            
            #line 207 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"ExclusiveEdgeGenerator(SqlBytes  PathVarbinary, SqlInt64 nodeid, SqlBytes array, SqlBytes dele)
	{
		if (array == null || array.IsNull)
			yield break;
		//var PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? new MemoryStream(PathVarbinary.Value) : new MemoryStream();
		Stream PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? PathVarbinary.Stream : new MemoryStream();
		var brPath = new BinaryReader(PathMemory);
		var PathDict =  new Dictionary<Tuple<long, long, Int32>, bool>();
		if (PathVarbinary != null && !PathVarbinary.IsNull) {
			while (brPath.BaseStream.Position != brPath.BaseStream.Length)
			{
				var Edgeid = Tuple.Create(brPath.ReadInt64(), brPath.ReadInt64(), brPath.ReadInt32());
				PathDict[Edgeid] = true;
			}
		}
		if (PathDict.Count == 0) 
		{
			foreach (var it in ");
            
            #line 224 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder(array, dele))\r\n\t\t\t{\r\n\t\t\t\tvar  adjacent = it as ");
            
            #line 226 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult;\r\n\t\t\t\tvar EdgeId = Tuple.Create(nodeid.Value, (long) ");
            
            #line 227 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeColumnId));
            
            #line default
            #line hidden
            this.Write(", adjacent.EdgeId);\r\n\t\t\t\t\tyield return new ");
            
            #line 228 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tEdgeId = adjacent.EdgeId,\r\n\t\t\t\t\t\tEdge" +
                    "ColumnId = ");
            
            #line 231 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeColumnId));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\tSinkId = adjacent.Sink, ");
            
            #line 232 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

						for (var i = 0; i < variables.Count; ++i)
						{
							WriteLine(indent + variables[i].Item1 + " = adjacent." + variables[i].Item1 + ",");
						}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tforeach (var it in ");
            
            #line 243 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Decoder(array, dele))\r\n\t\t\t{\r\n\t\t\t\tvar  adjacent = it as ");
            
            #line 245 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult;\r\n\t\t\t\tvar EdgeId = Tuple.Create(nodeid.Value, (long) ");
            
            #line 246 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeColumnId));
            
            #line default
            #line hidden
            this.Write(", adjacent.EdgeId);\r\n\t\t\t\tif (!PathDict.ContainsKey(EdgeId))\r\n\t\t\t\t{\r\n\t\t\t\t\tyield re" +
                    "turn new ");
            
            #line 249 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tEdgeId = adjacent.EdgeId,\r\n\t\t\t\t\t\tEdge" +
                    "ColumnId = ");
            
            #line 252 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeColumnId));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\tSinkId = adjacent.Sink, ");
            
            #line 253 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

						for (var i = 0; i < variables.Count; ++i)
						{
							WriteLine(indent + variables[i].Item1 + " = adjacent." + variables[i].Item1 + ",");
						}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tyield break;\r\n\t}\r\n\r\n\t[Microsoft.SqlServer.Server.Sql" +
                    "Function(\r\n\t\tDataAccess = DataAccessKind.None,\r\n\t\tIsDeterministic = true,\r\n\t\tIsP" +
                    "recise = true)]\r\n\tpublic static SqlBytes ");
            
            #line 270 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"Recycle(SqlBytes src, SqlBytes toRecycle)
	{
		if (src.IsNull || src.Length == 0)
		{
			return SqlBytes.Null;
		}
		if (toRecycle.IsNull || src.Length == 0)
			return src;
		var toRecycleArray = new Int32[(int)toRecycle.Length];
		Buffer.BlockCopy(toRecycle.Value, 0, toRecycleArray, 0, (int)toRecycle.Length);

		var toRecycleHashTable = new Hashtable();
		for (var i = 0; i < toRecycleArray.Length; ++i)
		{
			if (toRecycleHashTable.Contains(toRecycleArray[i]))
			{
				var itemCount = (int) toRecycleHashTable[toRecycleArray[i]];
				toRecycleHashTable[toRecycleArray[i]] = itemCount + 1;
			}
			else
				toRecycleHashTable.Add(toRecycleArray[i], 1);
		}


		var br = new BinaryReader(src.Stream);
			var resultMs = new MemoryStream();
				var bw = new BinaryWriter(resultMs);
					var edgeid = (Int32)0;
					while (br.BaseStream.Position < br.BaseStream.Length)
					{
						");
            
            #line 300 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t//read bitmap\r\n\t\t\t\t\t\tbyte[] bitmap = br.ReadBytes(");
            
            #line 302 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\t\t");
            
            #line 303 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t// read\r\n\t\t\t\t\t\tvar sink = br.ReadInt64();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tedgeid++;\r\n\t\t\t\t\t\ti" +
                    "f (toRecycleHashTable.Contains(edgeid))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t");
            
            #line 310 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
var count3 = 0;
						foreach (var variable in variables)
						{
							string str = "(bitmap["+ (count3 / 8).ToString() + "]" + " & " + (1 << (count3%8)).ToString() + ") != 0";
							count3++;
							var variableName = variable.Item1;
							var variableType = variable.Item2;
							WriteLine(indent + "if("+ str + ") {");
							WriteLine(indent + "br.Read" + typeDictionary[variableType].Item2 + "();");
							WriteLine(indent + "}" );
						} 
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// write\r\n\r\n\t\t\t\t\t\t");
            
            #line 326 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tbw.Write(bitmap);\r\n\t\t\t\t\t\t");
            
            #line 328 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tbw.Write(sink);\r\n\t\t\t\t\t\t");
            
            #line 330 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

						indent = "							";
						var _count = 0;
						foreach (var variable in variables)
						{
							string str = "(bitmap["+ (_count / 8).ToString() + "]" + " & " + (1 << (_count%8)).ToString() + ") != 0";
							_count++;
							var variableName = variable.Item1;
							var variableType = variable.Item2;
							WriteLine(indent + "if("+ str + ") {");
							WriteLine(indent + "bw.Write(br.Read" + typeDictionary[variableType].Item2 + "());");
							WriteLine(indent + "}" );
						} 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t}\r\n\t\t\t\t\treturn new SqlBytes(resultMs);\r\n\r\n\t}\r\n\t");
            
            #line 347 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
 }
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n\t//edge encoder\r\n");
            
            #line 351 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
foreach (var edge in EdgeList) {
	var edgeName = edge.Item1;
	var variables = edge.Item3;
	var attributeSize = variables.Count();
	var byteSize = (attributeSize - 1) / 8 + 1; 
		if (attributeSize == 0) {
			byteSize = 0;
		}

            
            #line default
            #line hidden
            this.Write("[Serializable]\r\n\t[Microsoft.SqlServer.Server.SqlUserDefinedAggregate(Format.UserD" +
                    "efined,\r\n\t\tIsInvariantToNulls = true,\r\n\t\tIsInvariantToOrder = true,\r\n\t\tIsInvaria" +
                    "ntToDuplicates = false,\r\n\t\tMaxByteSize = -1)]\r\npublic struct ");
            
            #line 366 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("Encoder : IBinarySerialize\r\n{\r\n\tprivate MemoryStream _stream;\r\n\tprivate BinaryWri" +
                    "ter _writer;\r\n\r\n\tpublic void Init()\r\n\t{\r\n\t\t_stream = new MemoryStream();\r\n\t\t_wri" +
                    "ter = new BinaryWriter(_stream);\r\n\t}\r\n\r\n\tpublic void Accumulate(\r\n\t\tSqlInt64 sin" +
                    "k");
            
            #line 378 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	var indent = "        ";
	for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write(indent + "Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
	}
            
            #line default
            #line hidden
            this.Write(")\r\n\t{\r\n\t\tif (sink.IsNull)\r\n\t\t\treturn;\r\n\t\t");
            
            #line 388 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\tByte[] bitmap = new Byte[");
            
            #line 389 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write("];\r\n\t\tArray.Clear(bitmap, 0, bitmap.Length);\r\n\t\t");
            
            #line 391 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 392 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	var count = 0;
	foreach (var variable in variables)
	{
		var variableName = variable.Item1;
		var variableType = variable.Item2;
		var pos = count / 8;
		var bit = (1 << (count % 8));
		
            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 401 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\tbitmap[");
            
            #line 402 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pos));
            
            #line default
            #line hidden
            this.Write("] |= ");
            
            #line 402 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(bit));
            
            #line default
            #line hidden
            this.Write("; \r\n\t\t}\r\n\t");
            
            #line 404 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

		count++;
	}
	
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 408 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t_writer.Write(bitmap);\r\n\t");
            
            #line 410 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t_writer.Write(sink.Value);\r\n");
            
            #line 412 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	foreach (var variable in variables)
	{
		var variableName = variable.Item1;
		var variableType = variable.Item2;
		
            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 418 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\t_writer.Write(");
            
            #line 419 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".Value);\r\n\t\t}\r\n\t");
            
            #line 421 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	}
	
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\r\n\tpublic void Merge (");
            
            #line 427 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"Encoder group)
	{
		_writer.Write(group._stream.GetBuffer(), 0, (int) group._stream.Length);
	}

	public SqlBytes Terminate()
	{
		return new SqlBytes(_stream);
	}

	public void Read(BinaryReader r)
	{
		if (_stream != null)
			_stream.Dispose();
		if (_writer != null)
			_writer.Dispose();
		_stream = new MemoryStream();
		_writer = new BinaryWriter(_stream);
		_writer.Write(r.ReadBytes((int)r.BaseStream.Length));
	}

	public void Write(BinaryWriter w)
	{
		w.Write(_stream.GetBuffer(), 0, (int) _stream.Length);
	}

}

	
");
            
            #line 456 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\npublic partial class UserDefinedFunctions\r\n{\r\n\t//path message encoder\r\n");
            
            #line 463 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

foreach (var edge in EdgeList) {
	var edgeName = edge.Item1;
	var edgeColumnId = edge.Item2;
	var variables = edge.Item3;
	var attributeSize = variables.Count() + 1;//User-supplied Id may be null
	var byteSize = (attributeSize - 1) / 8 + 1; 

            
            #line default
            #line hidden
            this.Write("\r\n\t[Microsoft.SqlServer.Server.SqlFunction]\r\n\tpublic static SqlBytes ");
            
            #line 473 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write("_PathMessageEncoder(SqlString nodeType, SqlString Id,\r\n\t\tSqlString edgeType");
            
            #line 474 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
var indent = "		";
	for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write(indent + "Sql" + typeDictionary[variables[i].Item2].Item2 + " " + variables[i].Item1);
	}
            
            #line default
            #line hidden
            this.Write(")\r\n\t{\r\n\t\tMemoryStream _stream = new MemoryStream();\r\n\t\tBinaryWriter _writer = new" +
                    " BinaryWriter(_stream);\r\n\r\n\t\tByte[] bitmap = new Byte[");
            
            #line 484 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write("];\r\n\t\tArray.Clear(bitmap, 0, bitmap.Length);\r\n\t\tif (!Id.IsNull)\r\n\t\t{\r\n\t\t\tbitmap[0" +
                    "] |= 1;\r\n\t\t}\r\n");
            
            #line 490 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	var count = 1;
	foreach (var variable in variables)
	{
		var variableName = variable.Item1;
		var variableType = variable.Item2;
		var pos = count / 8;
		var bit = (1 << (count % 8));
		
            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 499 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\tbitmap[");
            
            #line 500 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pos));
            
            #line default
            #line hidden
            this.Write("] |= ");
            
            #line 500 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(bit));
            
            #line default
            #line hidden
            this.Write("; \r\n\t\t}\r\n");
            
            #line 502 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

		count++;
	}

            
            #line default
            #line hidden
            this.Write("\t\t_writer.Write(bitmap);\r\n\t\t_writer.Write(nodeType.Value);\r\n\t\tif (!Id.IsNull) \r\n\t" +
                    "\t{\r\n\t\t\t_writer.Write(Id.Value);\r\n\t\t}\r\n\t\t_writer.Write(edgeType.Value);\r\n");
            
            #line 513 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	foreach (var variable in variables)
	{
		var variableName = variable.Item1;
		var variableType = variable.Item2;

            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 519 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\t_writer.Write(");
            
            #line 520 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".Value);\r\n\t\t}\r\n");
            
            #line 522 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("\t\treturn new SqlBytes(_stream);\r\n\t}\r\n\t\r\n\t//path message decoder\r\n\t[Microsoft.SqlS" +
                    "erver.Server.SqlFunction]\r\n\tpublic static SqlString ");
            
            #line 530 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edgeName));
            
            #line default
            #line hidden
            this.Write(@"_PathMessageDecoder(SqlBytes array, SqlString nodeType, SqlString id)
	{
		if (array == null || array.IsNull)
			return new SqlString(""["" +
			(nodeType.Value + (id.IsNull ? """" : id.Value.ToString())) +""]"");
		var br = new BinaryReader(array.Stream);
		string res = ""[""; 
		while (br.BaseStream.Position != br.BaseStream.Length)
		{
			byte[] bitmap = br.ReadBytes(");
            
            #line 539 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write(@");
			res += ""{\""NodeType\"":\"""";
			res += br.ReadString() + ""\"", \""Id\"":"";
			if ((bitmap[0] & 1) != 0) {
				res += ""\"""" + br.ReadString() + ""\""}, {\""EdgeType\"":\"""";
			} else {
				res += ""null}, {\""EdgeType\"":\"""";
			}
			res += br.ReadString() + ""\"""";
			");
            
            #line 548 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (variables.Count != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\tres += \", \\\"Attribute\\\":{\";\r\n");
            
            #line 550 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"

			indent += "    ";
			count = 1;
			foreach (var variable in variables)
			{
				var variableName = variable.Item1;
				var variableType = variable.Item2;
				if (count != 1)
				{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tres += \",\";\r\n");
            
            #line 560 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
				}

            
            #line default
            #line hidden
            this.Write("\t\t\t\tres += \"\\\"");
            
            #line 562 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write("\\\":\";\r\n\t\t\t\tif ((bitmap[");
            
            #line 563 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((count / 8).ToString()));
            
            #line default
            #line hidden
            this.Write("] & ");
            
            #line 563 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((1 << (count%8)).ToString()));
            
            #line default
            #line hidden
            this.Write(") != 0) {\r\n");
            
            #line 564 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
if (variableType.ToLower() == "string") {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tres += \"\\\"\" + br.Read");
            
            #line 565 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variableType].Item2));
            
            #line default
            #line hidden
            this.Write("().ToString() + \"\\\"\";\r\n");
            
            #line 566 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
} else {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tres += br.Read");
            
            #line 567 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variableType].Item2));
            
            #line default
            #line hidden
            this.Write("().ToString().ToLower();\r\n");
            
            #line 568 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t} else {\r\n\t\t\t\t\tres += \"null\";\r\n\t\t\t\t}\r\n");
            
            #line 572 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
				count++;
			}
            
            #line default
            #line hidden
            this.Write("\t\t\tres += \"}\";\r\n\t\t\t");
            
            #line 575 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(@"			res += ""}, "";
		}
			res += ""{\""NodeType\"":\"""";
			res += nodeType.Value + ""\"", \""Id\"":"";
			if (!id.IsNull) 
			{
				res += ""\"""" + id.Value + ""\""}"";
			} 
			else 
			{
				res += ""null}"";
			}

		res += ""]"";
		return new SqlString(res);
	}
");
            
            #line 592 "D:\Source\graphview\GraphView\NodeTableGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class NodeTableGraphViewCodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
