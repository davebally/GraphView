<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".sql" #>


<#  
	var typeDictionary = new Dictionary<string, Tuple<string, string, int>>
	{
		{"int", new Tuple<string, string, int>("int", "SqlInt32", 4)},
		{"long", new Tuple<string, string, int>("bigint", "SqlInt64", 8)},
		{"double", new Tuple<string, string, int>("float", "SqlDouble", 8)},
		{"string", new Tuple<string, string, int>("nvarchar(4000)", "SqlString", 4)},
		{"bool", new Tuple<string, string, int>("bit", "SqlBoolean", 1)}
	};
	var Name = Schema + "_" + NodeName + "_" + EdgeName;
	var columnNull = Tuple.Create("", "");
#>

create function <#=Name#>_bfsPath(
		@source bigint, 
		@minlength bigint,
		@maxlength bigint<#
	for (int i = 0; i < EdgeColumn.Count; i++)
	{
		WriteLine(", ");
		Write("		");
		Write("@edge" + i.ToString() + " varbinary(max)");
		WriteLine(", ");
		Write("		");
		Write("@del" + i.ToString() + " varbinary(max)");
	}
	foreach (var it in Attribute) {
		WriteLine(", ");
		Write("		");
		Write("@" + it.Item1);
		Write(" " + typeDictionary[it.Item2].Item1);
	}#>
)
returns table
as 
return 
with  allPath(sink, varPath) as (
		select newpath.sink,  
		dbo.ConvertNumberIntoBinaryForPath(@source, EdgeColumnId, newpath.EdgeId)
		from <#=Name#>_Decoder(
		<#for (int i = 0; i < EdgeColumn.Count; i++)
		{
			if (i != 0) 
			{
				WriteLine(", ");
				Write("		");
			}
			Write("@edge" + i.ToString());
			WriteLine(", ");
			Write("		");
			Write("@del" + i.ToString());
		}#>) as newpath
		Where (@maxlength != 0)
<#foreach (var it in Attribute) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>

		union all

		select newpath.Sink, allpath.varPath + 
		dbo.ConvertNumberIntoBinaryForPath(allpath.sink, EdgeColumnId, newpath.EdgeId) as Path
		from (allPath join <#=Name#>_SubView on  allPath.sink = <#=Name#>_SubView.GlobalNodeId)
		cross apply <#=Name#>_ExclusiveEdgeGenerator(allPath.varPath, <#=Name#>_SubView.GlobalNodeId<#
			foreach (var it in EdgeColumn){
			if (it.Equals(columnNull)) 
			{
				WriteLine(",");
				Write("		");
				Write("null, null");
			}
			else
			{
				WriteLine(",");
				Write("		");
				Write(Name + "_SubView." + it.Item1 + "_" + it.Item2 + ",");
				Write(Name + "_SubView." + it.Item1 + "_" + it.Item2 + "DeleteCol");
			}
		  }#>) as newPath
		Where (@maxlength = -1 or DATALENGTH(allPath.varPath) <= (@maxlength - 1) * 20)
<#foreach (var it in Attribute) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>
)
select @source as sink, CAST(0x as varbinary(max)) as varPath
where @minlength = 0
union
select *
from allPath
where DATALENGTH(allPath.varPath) >= @minlength * 20

GO

create function <#=Name#>_bfsPathWithMessage(@source bigint, 
		@minlength bigint, @maxlength bigint,
		@nodeType nvarchar(max), @id nvarchar(max)<#
	for (int i = 0; i < EdgeColumn.Count; i++)
	{
		WriteLine(", ");
		Write("		");
		Write("@edge" + i.ToString() + " varbinary(max)");
		WriteLine(", ");
		Write("		");
		Write("@del" + i.ToString() + " varbinary(max)");
	}
	foreach (var it in Attribute) {
		WriteLine(", ");
		Write("		");
		Write("@" + it.Item1);
		Write(" " + typeDictionary[it.Item2].Item1);
	}#>
)
returns table
as 
return 
with  allPath(sink, varPath, PathMessage) as (
		select newpath.sink,  
		dbo.ConvertNumberIntoBinaryForPath(@source,  EdgeColumnId, newpath.EdgeId) as varPath,
		dbo.<#=Name#>_PathMessageEncoder(@nodeType, @id,
			newpath._EdgeType
			<#foreach (var it in Attribute) {#>
				,newpath.<#=it.Item1#>
			<#}#>) as PathMessage
		from <#=Name#>_Decoder(
		<#for (int i = 0; i < EdgeColumn.Count; i++)
		{
			if (i != 0) 
			{
				WriteLine(", ");
				Write("		");
			}
			Write("@edge" + i.ToString());
			WriteLine(", ");
			Write("		");
			Write("@del" + i.ToString());
		}#>) as newpath
		Where (@maxlength != 0)
<#foreach (var it in Attribute) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>

		union all

		select newpath.Sink, allpath.varPath + 
		dbo.ConvertNumberIntoBinaryForPath(allpath.sink, EdgeColumnId, newpath.EdgeId) as varPath,
		(allpath.PathMessage + dbo.<#=Name#>_PathMessageEncoder(<#=Name#>_SubView._NodeType,
			<#=Name#>_SubView._NodeId,
			newpath._EdgeType
			<#foreach (var it in Attribute) {#>
				, newpath.<#=it.Item1#>
			<#}#>)) as PathMessage
		from (allPath join <#=Name#>_SubView on  allPath.sink = <#=Name#>_SubView.GlobalNodeId)
		cross apply <#=Name#>_ExclusiveEdgeGenerator(allPath.varPath, <#=Name#>_SubView.GlobalNodeId<#
			foreach (var it in EdgeColumn){
			if (it.Equals(columnNull)) 
			{
				WriteLine(",");
				Write("		");
				Write("null, null");
			}
			else
			{
				WriteLine(",");
				Write("		");
				Write(Name + "_SubView." + it.Item1 + "_" + it.Item2 + ",");
				Write(Name + "_SubView." + it.Item1 + "_" + it.Item2 + "DeleteCol");
			}
		  }#>) as newPath
		Where (@maxlength = -1 or DATALENGTH(allPath.varPath) <= (@maxlength - 1) * 20)
<#foreach (var it in Attribute) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>
)
select @source as sink, CAST(0x as varbinary(max)) as varPath, CAST(0x as varbinary(max)) as PathMessage
where @minlength = 0
union
select *
from allPath
where DATALENGTH(allPath.varPath) >= @minlength * 20
