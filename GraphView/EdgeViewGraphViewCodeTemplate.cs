// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GraphView
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class EdgeViewGraphViewCodeTemplate : EdgeViewGraphViewCodeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("    ");
            this.Write("    ");
            this.Write("    ");
            this.Write("    ");
            this.Write("    ");
            this.Write("\r\n");
            
            #line 8 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

    var typeDictionary = new Dictionary<string, Tuple<string, string>> 
{ 
{"int", new Tuple<string, string>("int", "Int32")},
{"long", new Tuple<string, string>("bigint", "Int64")},
{"double", new Tuple<string, string>("float", "Double")},
{"string", new Tuple<string, string>("nvarchar(4000)", "String")},
{"bool", new Tuple<string, string>("bit", "Boolean")}
    };
            
            #line default
            #line hidden
            this.Write(@"    using System;
    using System.IO;
    using System.Collections;
	using System.Collections.Generic;
    using System.Data.SqlTypes;
    using System.Text;
    using Microsoft.SqlServer.Server;

    public partial class UserDefinedFunctions
	{
    private class ");
            
            #line 27 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult\r\n    {\r\n\t\tpublic long Sink { get; set; }\r\n\t\tpublic long ColumnId { " +
                    "get; set; }\r\n\t\tpublic Int32 EdgeId{ get; set; }\r\n\t\tpublic string _EdgeType {get;" +
                    " set;}\r\n");
            
            #line 33 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
foreach (var variable in AttributeTypeDict) {
            
            #line default
            #line hidden
            this.Write("\t\tpublic Sql");
            
            #line 34 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variable.Value].Item2));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 34 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Key));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 35 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n    public static void ");
            
            #line 38 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("Decoder_FillRow(\r\n    object tableTypeObject,\r\n    out SqlInt64 sink, out SqlInt6" +
                    "4 columnId, out SqlInt32 edgeid, out SqlString _EdgeType");
            
            #line 40 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

    var indent = "        ";
    foreach (var variable in AttributeTypeDict) {
        WriteLine(",");
        Write(indent + "out Sql" + typeDictionary[variable.Value].Item2 + " " + variable.Key);
    }
            
            #line default
            #line hidden
            this.Write(")\r\n    {\r\n        var decoderResult = (");
            
            #line 47 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult)tableTypeObject;\r\n        sink = decoderResult.Sink;\r\n        colum" +
                    "nId = decoderResult.ColumnId;\r\n        edgeid = decoderResult.EdgeId;\r\n\t\t_EdgeTy" +
                    "pe = new SqlString(decoderResult._EdgeType);\r\n");
            
            #line 52 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
foreach (var variable in AttributeTypeDict) {
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 53 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Key));
            
            #line default
            #line hidden
            this.Write(" = decoderResult.");
            
            #line 53 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Key));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 54 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    [SqlFunction(\r\n    DataAccess = DataAccessKind.None,\r\n    TableDefin" +
                    "ition = \"Sink bigint, ColumnId bigint, EdgeId int, _EdgeType string");
            
            #line 59 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

    foreach(var variable in AttributeTypeDict)
    Write(", " + variable.Key + " " + typeDictionary[variable.Value].Item1);

            
            #line default
            #line hidden
            this.Write("\",\r\n    FillRowMethodName = \"");
            
            #line 63 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("Decoder_FillRow\",\r\n    IsDeterministic = true,\r\n    IsPrecise = false\r\n    )]\r\n\r\n" +
                    "\tpublic static IEnumerable ");
            
            #line 68 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("Decoder(\r\n");
            
            #line 69 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

    if (Mapping.Count() != 0){
        Write(indent + "SqlBytes array0");
        WriteLine(",");
        Write(indent + "SqlBytes dele0");
    }
    for (int i = 1; i < Mapping.Count(); i++) {
        WriteLine(",");
        Write(indent + "SqlBytes array" + i.ToString());
        WriteLine(",");
        Write(indent + "SqlBytes dele" + i.ToString());
    }
            
            #line default
            #line hidden
            this.Write(")\r\n    {\r\n        var edgeid = (Int32)0;\r\n\t\tvar deleDict = new Dictionary<Int32, " +
                    "bool>();\r\n");
            
            #line 84 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

    var calc = 0;
	indent += "    ";
    foreach(var it in Mapping) {
        var array = "array" + calc.ToString();
		var dele = "dele" + calc.ToString();
        calc++;
        var variables = it.Value;
		var columnId = ColumnId[it.Key];
        var attributeSize = variables.Count();
        var byteSize = (attributeSize - 1) / 8 + 1; 
        if (attributeSize == 0) {
            byteSize = 0;
        }

            
            #line default
            #line hidden
            this.Write("\t\tedgeid = 0;\r\n\t\tdeleDict.Clear();\r\n\t\tif (");
            
            #line 101 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dele));
            
            #line default
            #line hidden
            this.Write(" != null && !");
            
            #line 101 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dele));
            
            #line default
            #line hidden
            this.Write(".IsNull) \r\n\t\t{\r\n\t\t\t//var brdele = new BinaryReader(new MemoryStream(");
            
            #line 103 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dele));
            
            #line default
            #line hidden
            this.Write(".Value));\r\n\t\t\tvar brdele = new BinaryReader(");
            
            #line 104 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dele));
            
            #line default
            #line hidden
            this.Write(".Stream);\r\n\t\t\twhile (brdele.BaseStream.Position != brdele.BaseStream.Length)\r\n\t\t\t" +
                    "{\r\n\t\t\t\tdeleDict[brdele.ReadInt32()] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (");
            
            #line 110 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(array));
            
            #line default
            #line hidden
            this.Write(" != null && !");
            
            #line 110 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(array));
            
            #line default
            #line hidden
            this.Write(".IsNull)\r\n\t\t{\r\n        //var br = new BinaryReader(new MemoryStream(");
            
            #line 112 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(array));
            
            #line default
            #line hidden
            this.Write(".Value));\r\n        var br = new BinaryReader(");
            
            #line 113 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(array));
            
            #line default
            #line hidden
            this.Write(".Stream);\r\n        while (br.BaseStream.Position != br.BaseStream.Length)\r\n      " +
                    "  {\r\n            edgeid++;\r\n");
            
            #line 117 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
if (byteSize != 0) {
            
            #line default
            #line hidden
            this.Write("            byte[] bitmap = br.ReadBytes(");
            
            #line 118 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(byteSize));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 119 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("            var sink = br.ReadInt64();\r\n            object temp;\r\n");
            
            #line 122 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

            var count = 0;
            foreach (var iterator in AttributeTypeDict) {
                    WriteLine(indent + "var _" + iterator.Key + " = Sql" + typeDictionary[iterator.Value].Item2 + ".Null;"); }
            foreach (var variable in variables)
            {
                    var variableName = (variable.Item2 == "") ? "temp": "_" + variable.Item2;
                    var variableType = variable.Item1;
                    var str = "((bitmap["+ (count / 8).ToString() + "]" + " & " + (1 << (count%8)).ToString() + ") == 0)? Sql" + typeDictionary[variableType].Item2 + ".Null" +" :";
                    if (attributeSize == 0) {
                        str = "";
                    }
                    WriteLine(indent + variableName + " = " + str + "br.Read" + typeDictionary[variableType].Item2 + "();");
                    count++;
            }

            
            #line default
            #line hidden
            this.Write("\t\t\tif (!deleDict.ContainsKey(edgeid)) {\r\n\t\t\t\tyield return new ");
            
            #line 139 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult\r\n\t\t\t\t{\r\n\t\t\t\t\tSink = sink, ColumnId = ");
            
            #line 141 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(columnId));
            
            #line default
            #line hidden
            this.Write(", EdgeId = edgeid, _EdgeType = \"");
            
            #line 141 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(it.Key.Item2));
            
            #line default
            #line hidden
            this.Write("\",\r\n");
            
            #line 142 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

					foreach (var variable in AttributeTypeDict)
					{
						WriteLine(indent + "    " + variable.Key + " = _" + variable.Key + ",");
					}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t};\r\n\t\t\t}\r\n        }\r\n\t\t}\r\n");
            
            #line 152 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\tyield break;\r\n    }\r\n\r\n\r\n   //Path Decoder\r\n    private class ");
            
            #line 158 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult \r\n    {\r\n        public int EdgeId{get; set;}\r\n     " +
                    "   public long SinkId{get; set;}\r\n        public long ColumnId{get; set;}\r\n     " +
                    "   public string _EdgeType {get; set;}\r\n");
            
            #line 164 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
foreach (var variable in AttributeTypeDict) {
            
            #line default
            #line hidden
            this.Write("        public Sql");
            
            #line 165 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variable.Value].Item2));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 165 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Key));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 166 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    public static void ");
            
            #line 169 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGenerator_FillRow(\r\n        object tableTypeObject,\r\n        out Sql" +
                    "Int32 EdgeId, out SqlInt64 ColumnId, out SqlInt64 SinkId, out SqlString _EdgeTyp" +
                    "e");
            
            #line 171 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"


		foreach (var variable in AttributeTypeDict) {
            WriteLine(",");
            Write(indent + "out Sql" + typeDictionary[variable.Value].Item2 + " " + variable.Key);
		}
            
            #line default
            #line hidden
            this.Write("        )\r\n    {\r\n        var decoderResult = (");
            
            #line 179 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult)tableTypeObject;\r\n        EdgeId = decoderResult.Edg" +
                    "eId;\r\n        ColumnId = decoderResult.ColumnId;\r\n\t\t_EdgeType = decoderResult._E" +
                    "dgeType;\r\n        SinkId = decoderResult.SinkId;\r\n");
            
            #line 184 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
foreach (var variable in  AttributeTypeDict) {
            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 185 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Key));
            
            #line default
            #line hidden
            this.Write(" = decoderResult.");
            
            #line 185 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variable.Key));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 186 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n    \r\n        [SqlFunction(\r\n        DataAccess = DataAccessKind.None,\r\n  " +
                    "      TableDefinition = \"EdgeId int, ColumnId bigint, SinkId bigint, _EdgeType S" +
                    "tring\",\r\n        FillRowMethodName = \"");
            
            #line 192 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGenerator_FillRow\",\r\n        IsDeterministic = true,\r\n        IsPrec" +
                    "ise = false\r\n        )]\r\n    public static IEnumerable ");
            
            #line 196 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGenerator(\r\n\t\tSqlBytes  PathVarbinary,\r\n\t\tSqlInt64 nodeid,\r\n");
            
            #line 199 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

	indent = "        ";
    if (Mapping.Count() != 0){
        Write(indent + "SqlBytes array0");
        WriteLine(",");
        Write(indent + "SqlBytes dele0");
    }
    for (int i = 1; i < Mapping.Count(); i++) {
        WriteLine(",");
        Write(indent + "SqlBytes array" + i.ToString());
        WriteLine(",");
        Write(indent + "SqlBytes dele" + i.ToString());
}
            
            #line default
            #line hidden
            this.Write(@")
    {
        //var PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? new MemoryStream(PathVarbinary.Value) : new MemoryStream();
        Stream PathMemory = (PathVarbinary != null && !PathVarbinary.IsNull) ? PathVarbinary.Stream : new MemoryStream();
		var brPath = new BinaryReader(PathMemory);
        var PathDict =  new Dictionary<Tuple<long, long, Int32>, bool>();
        if (PathVarbinary != null && !PathVarbinary.IsNull) {
            while (brPath.BaseStream.Position != brPath.BaseStream.Length)
            {
                var Edgeid = Tuple.Create(brPath.ReadInt64(), brPath.ReadInt64(), brPath.ReadInt32());
                PathDict[Edgeid] = true;
            }
        }
        
        foreach (var it in ");
            
            #line 225 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("Decoder(\r\n");
            
            #line 226 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

	indent += "    ";
    if (Mapping.Count() != 0){
        Write(indent + "array0");
        WriteLine(",");
        Write(indent + "dele0");
    }
    for (int i = 1; i < Mapping.Count(); i++) {
        WriteLine(",");
        Write(indent + "array" + i.ToString());
        WriteLine(",");
        Write(indent + "dele" + i.ToString());
}
            
            #line default
            #line hidden
            this.Write("))\r\n        {\r\n            var  adjacent = it as ");
            
            #line 240 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("DecoderResult;\r\n            var EdgeId = Tuple.Create(nodeid.Value, adjacent.Colu" +
                    "mnId, adjacent.EdgeId);\r\n            if (!PathDict.ContainsKey(EdgeId))\r\n       " +
                    "     {\r\n                yield return new ");
            
            #line 244 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("ExclusiveEdgeGeneratorResult\r\n                {\r\n                    EdgeId = adj" +
                    "acent.EdgeId,\r\n\t\t\t\t\tColumnId = adjacent.ColumnId,\r\n                    SinkId = " +
                    "adjacent.Sink,\r\n\t\t\t\t\t_EdgeType = adjacent._EdgeType,\r\n");
            
            #line 250 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

					indent += "        ";
					foreach (var variable in AttributeTypeDict) {
                        WriteLine(indent + variable.Key + " = adjacent." + variable.Key + ",");
					}

            
            #line default
            #line hidden
            this.Write("                };\r\n            }\r\n        }\r\n        yield break;\r\n    }\r\n}\r\n\r\np" +
                    "ublic partial class UserDefinedFunctions\r\n{\r\n\t//path message encoder\r\n");
            
            #line 266 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

	var attributeInfo= AttributeTypeDict.Select(x => Tuple.Create(x.Key, x.Value)).ToList();
	var size = (attributeInfo.Count()) / 8 + 1; 

            
            #line default
            #line hidden
            this.Write("\r\n\t[Microsoft.SqlServer.Server.SqlFunction]\r\n\tpublic static SqlBytes ");
            
            #line 272 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write("_PathMessageEncoder(SqlString nodeType, SqlString Id,\r\n\t\tSqlString edgeType");
            
            #line 273 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
indent = "		";
	for (var i = 0; i < attributeInfo.Count; ++i)
	{
		WriteLine(",");
		Write(indent + "Sql" + typeDictionary[attributeInfo[i].Item2].Item2 + " " + attributeInfo[i].Item1);
	}
            
            #line default
            #line hidden
            this.Write(")\r\n\t{\r\n\t\tMemoryStream _stream = new MemoryStream();\r\n\t\tBinaryWriter _writer = new" +
                    " BinaryWriter(_stream);\r\n\r\n\t\tByte[] bitmap = new Byte[");
            
            #line 283 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(size));
            
            #line default
            #line hidden
            this.Write("];\r\n\t\tArray.Clear(bitmap, 0, bitmap.Length);\r\n\t\tif (!Id.IsNull)\r\n\t\t{\r\n\t\t\tbitmap[0" +
                    "] |= 1;\r\n\t\t}\r\n");
            
            #line 289 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

	var count2 = 1;
	foreach (var variable in attributeInfo)
	{
		var variableName = variable.Item1;
		var variableType = variable.Item2;
		var pos = count2 / 8;
		var bit = (1 << (count2 % 8));
		
            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 298 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\tbitmap[");
            
            #line 299 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pos));
            
            #line default
            #line hidden
            this.Write("] |= ");
            
            #line 299 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(bit));
            
            #line default
            #line hidden
            this.Write("; \r\n\t\t}\r\n");
            
            #line 301 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

		count2++;
	}

            
            #line default
            #line hidden
            this.Write("\t\t_writer.Write(bitmap);\r\n\t\t_writer.Write(nodeType.Value);\r\n\t\tif (!Id.IsNull) \r\n\t" +
                    "\t{\r\n\t\t\t_writer.Write(Id.Value);\r\n\t\t}\r\n\t\t_writer.Write(edgeType.Value);\r\n");
            
            #line 312 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

	foreach (var variable in attributeInfo)
	{
		var variableName = variable.Item1;
		var variableType = variable.Item2;

            
            #line default
            #line hidden
            this.Write("\t\tif (!");
            
            #line 318 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".IsNull) {\r\n\t\t\t_writer.Write(");
            
            #line 319 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write(".Value);\r\n\t\t}\r\n");
            
            #line 321 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("\t\treturn new SqlBytes(_stream);\r\n\t}\r\n\r\n\t//path message decoder\r\n\t[Microsoft.SqlSe" +
                    "rver.Server.SqlFunction]\r\n\tpublic static SqlString ");
            
            #line 329 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EdgeName));
            
            #line default
            #line hidden
            this.Write(@"_PathMessageDecoder(SqlBytes array, SqlString nodeType, SqlString id)
	{
		if (array == null || array.IsNull)
			return new SqlString(""["" +
			(nodeType.Value + (id.IsNull ? """" : id.Value.ToString())) +""]"");
		var br = new BinaryReader(array.Stream);
		string res = ""[""; 
		while (br.BaseStream.Position != br.BaseStream.Length)
		{
			byte[] bitmap = br.ReadBytes(");
            
            #line 338 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(size));
            
            #line default
            #line hidden
            this.Write(@");
			res += ""{\""NodeType\"":\"""";
			res += br.ReadString() + ""\"", \""Id\"":"";
			if ((bitmap[0] & 1) != 0) {
				res += ""\"""" + br.ReadString() + ""\""}, {\""EdgeType\"":\"""";
			} else {
				res += ""null}, {\""EdgeType\"":\"""";
			}
			res += br.ReadString() + ""\"""";
			");
            
            #line 347 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
if (attributeInfo.Count != 0) {
            
            #line default
            #line hidden
            this.Write("\t\t\tres += \", \\\"Attribute\\\":{\";\r\n");
            
            #line 349 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"

			indent += "    ";
			count2 = 1;
			foreach (var variable in attributeInfo)
			{
				var variableName = variable.Item1;
				var variableType = variable.Item2;
				if (count2 != 1)
				{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tres += \",\";\r\n");
            
            #line 359 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
				}

            
            #line default
            #line hidden
            this.Write("\t\t\t\tres += \"\\\"");
            
            #line 361 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableName));
            
            #line default
            #line hidden
            this.Write("\\\":\";\r\n\t\t\t\tif ((bitmap[");
            
            #line 362 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((count2 / 8).ToString()));
            
            #line default
            #line hidden
            this.Write("] & ");
            
            #line 362 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((1 << (count2 %8)).ToString()));
            
            #line default
            #line hidden
            this.Write(") != 0) {\r\n");
            
            #line 363 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
if (variableType.ToLower() == "string") {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tres += \"\\\"\" + br.Read");
            
            #line 364 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variableType].Item2));
            
            #line default
            #line hidden
            this.Write("().ToString() + \"\\\"\";\r\n");
            
            #line 365 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
} else {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tres += br.Read");
            
            #line 366 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeDictionary[variableType].Item2));
            
            #line default
            #line hidden
            this.Write("().ToString().ToLower();\r\n");
            
            #line 367 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t} else {\r\n\t\t\t\t\tres += \"null\";\r\n\t\t\t\t}\r\n");
            
            #line 371 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
			count2++;
			}
            
            #line default
            #line hidden
            this.Write("\t\t\tres += \"}\";\r\n\t\t\t");
            
            #line 374 "D:\Source\graphview\GraphView\EdgeViewGraphViewCodeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\tres += \"}, \";\r\n\t\t}\r\n\t\t\tres += \"{\\\"NodeType\\\":\\\"\";\r\n\t\t\tres += nodeType.Value + " +
                    "\"\\\", \\\"Id\\\":\";\r\n\t\t\tif (!id.IsNull) {\r\n\t\t\t\tres += \"\\\"\" + id.Value + \"\\\"}\";\r\n\t\t\t} " +
                    "else {\r\n\t\t\t\tres += \"null}\";\r\n\t\t\t}\r\n\r\n\t\tres += \"]\";\r\n\t\treturn new SqlString(res);" +
                    "\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class EdgeViewGraphViewCodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
