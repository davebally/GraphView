<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".sql" #>
<#  
			var typeDictionary = new Dictionary<string, Tuple<string, string, int>>
			{
				{"int", new Tuple<string, string, int>("int", "SqlInt32", 4)},
				{"long", new Tuple<string, string, int>("bigint", "SqlInt64", 8)},
				{"double", new Tuple<string, string, int>("float", "SqlDouble", 8)},
				{"string", new Tuple<string, string, int>("nvarchar(4000)", "SqlString", 4)},
				{"bool", new Tuple<string, string, int>("bit", "SqlBoolean", 1)}
			};
#>
<# if (Type == 0) {#> 
CREATE ASSEMBLY <#=AssemblyName#>_Assembly FROM <#=Path#>
GO

<#foreach (var edge in EdgeList) {
	var edgeName = edge.Item1;
	var edgeColumnId = edge.Item2; //The edge has sink and source in the same table or not.
	var variables = edge.Item3;
#>
CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_Decoder(
	@array varbinary(max),
	@dele varbinary(max))
	RETURNS TABLE
	( 
		Sink bigint, EdgeId int<#
		for (var i = 0; i < variables.Count; ++i)
		{
			WriteLine(",");
			Write("    " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
		}
		WriteLine("");
	#>
	)
AS EXTERNAL NAME <#=AssemblyName#>_Assembly.UserDefinedFunctions.<#=edgeName#>Decoder; 
GO

CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_ExclusiveEdgeGenerator(
@PathVarbinary varbinary(max), @nodeid bigint, @array varbinary(max), @array2 varbinary(max)) RETURNs TABLE
(
	EdgeId int, EdgeColumnId bigint, Sink bigint<#
	for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write("    " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
	}
	WriteLine("");
#>
)
  AS EXTERNAL NAME <#=AssemblyName#>_Assembly.UserDefinedFunctions.<#=edgeName#>ExclusiveEdgeGenerator;
GO

create function <#=AssemblyName#>_<#=edgeName#>_bfsPath(@source bigint, 
		@minlength bigint, @maxlength bigint,
		@edgeColumn varbinary(max), @Del varbinary(max)
<#foreach (var it in variables) {
		WriteLine(", ");
		Write("		");
		Write("@" + it.Item1);
		Write(" " + typeDictionary[it.Item2].Item1);
}#>
)
returns table
as 
return 
with  allPath(sink, varPath) as (
		select newpath.sink,  
		dbo.ConvertNumberIntoBinaryForPath(@source, <#=edgeColumnId#>, newpath.EdgeId)
		from <#=AssemblyName#>_<#=edgeName#>_Decoder(@edgeColumn, @Del) as newpath
		Where (@maxlength != 0)
<#foreach (var it in variables) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>

		union all

		select newpath.Sink, allpath.varPath + 
		
		dbo.ConvertNumberIntoBinaryForPath(allpath.sink, <#=edgeColumnId#>, newpath.EdgeId) as Path
		from (allPath join <#=NodeTable#> on  allPath.sink = <#=NodeTable#>.GlobalNodeId)
		cross apply <#=AssemblyName#>_<#=edgeName#>_ExclusiveEdgeGenerator(allPath.varPath,<#=NodeTable#>.GlobalNodeId,
		  <#=NodeTable#>.<#=edgeName#>, <#=NodeTable#>.<#=edgeName#>DeleteCol) as newPath
		Where (@maxlength = -1 or DATALENGTH(allPath.varPath) <= (@maxlength - 1) * 20)
<#foreach (var it in variables) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>
)
select @source as sink, CAST(0x as varbinary(max)) as varPath
where @minlength = 0
union
select *
from allPath
where DATALENGTH(allPath.varPath) >= @minlength * 20
GO

CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_PathMessageEncoder(
	@nodeType nvarchar(max), @id nvarchar(max),
	@edgeType nvarchar(max)<#for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write("	@" + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
	}
#>)
RETURNS varbinary(max)
AS EXTERNAL NAME <#=AssemblyName#>_Assembly.UserDefinedFunctions.<#=edgeName#>_PathMessageEncoder; 
GO

CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_PathMessageDecoder(
	@array varbinary(max), @nodeType nvarchar(max),
	@id nvarchar(max))
RETURNS nvarchar(max)
AS EXTERNAL NAME <#=AssemblyName#>_Assembly.UserDefinedFunctions.<#=edgeName#>_PathMessageDecoder; 
GO

create function <#=AssemblyName#>_<#=edgeName#>_bfsPathWithMessage(@source bigint, 
		@minlength bigint, @maxlength bigint,
		@nodeType nvarchar(max), @id nvarchar(max),
		@edgeColumn varbinary(max), @Del varbinary(max)
<#foreach (var it in variables) {
		WriteLine(", ");
		Write("		");
		Write("@" + it.Item1);
		Write(" " + typeDictionary[it.Item2].Item1);
}#>
)
returns table
as 
return 
with  allPath(sink, varPath, PathMessage) as (
		select newpath.sink,  
		dbo.ConvertNumberIntoBinaryForPath(@source, <#=edgeColumnId#>, newpath.EdgeId) as varPath,
		dbo.<#=AssemblyName#>_<#=edgeName#>_PathMessageEncoder(@nodeType, @id, '<#=edgeName#>'
			<#foreach (var it in variables) {#>
				,newpath.<#=it.Item1#>
			<#}#>) as PathMessage
		from <#=AssemblyName#>_<#=edgeName#>_Decoder(@edgeColumn, @Del) as newpath
		Where (@maxlength != 0)
<#foreach (var it in variables) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>

		union all

		select newpath.Sink, allpath.varPath + 
		dbo.ConvertNumberIntoBinaryForPath(allpath.sink, <#=edgeColumnId#>, newpath.EdgeId) as varPath,
		(allPath.PathMessage +
		dbo.<#=AssemblyName#>_<#=edgeName#>_PathMessageEncoder('<#=NodeTable#>',
			<#if (String.IsNullOrEmpty(UserId)) {#>
				null
			<#} else {#>
				<#=NodeTable#>.<#=UserId#>
			<#}#>
				, '<#=edgeName#>'
			<#foreach (var it in variables) {#>
				, newpath.<#=it.Item1#>
			<#}#>)) as PathMessage

		from (allPath join <#=NodeTable#> on  allPath.sink = <#=NodeTable#>.GlobalNodeId)
		cross apply <#=AssemblyName#>_<#=edgeName#>_ExclusiveEdgeGenerator(allPath.varPath,<#=NodeTable#>.GlobalNodeId,
		  <#=NodeTable#>.<#=edgeName#>, <#=NodeTable#>.<#=edgeName#>DeleteCol) as newPath
		Where (@maxlength = -1 or DATALENGTH(allPath.varPath) <= (@maxlength - 1) * 20)
<#foreach (var it in variables) {
		Write("		");
		Write("and (");
		Write("@" + it.Item1 + " is null or ");
		WriteLine("@" + it.Item1 + " = newPath." + it.Item1 + ")");
}#>
)
select @source as sink, CAST(0x as varbinary(max)) as varPath, CAST(0x as varbinary(max)) as PathMessage
where @minlength = 0
union
select *
from allPath
where DATALENGTH(allPath.varPath) >= @minlength * 20
GO

CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_Recycle(@src varbinary(max), @toRecycle varbinary(max))
RETURNS varbinary(max)
EXTERNAL NAME <#=AssemblyName#>_Assembly.UserDefinedFunctions.<#=edgeName#>Recycle;
GO

CREATE AGGREGATE <#=AssemblyName#>_<#=edgeName#>_Encoder
(
	@Sink bigint<#
	for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write("    @" + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
	}
	WriteLine(""); 
#>
)
RETURNS varbinary(max)
EXTERNAL NAME <#=AssemblyName#>_Assembly.<#=edgeName#>Encoder; 
GO

<#}#>
<#}#>


<# if (Type == 1) {#>
<#foreach (var edge in EdgeList) {
	var edgeName = edge.Item1;
	var variables = edge.Item3;
#>
CREATE ASSEMBLY <#=AssemblyName#>_<#=edgeName#>_Assembly FROM <#=Path#>
GO
CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_Decoder(
<#for (int i = 0; i < InputCount; i++) {#>
@array<#=i#> varbinary(max), @dele<#=i#> varbinary(max)<# if (i != InputCount - 1) WriteLine(","); #>
<#}#>) RETURNS TABLE
(
	Sink bigint, EdgeColumnId bigint, EdgeId int, _EdgeType nvarchar(max)<#
	for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write("    " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
	}
	WriteLine("");
#>
) 
  AS EXTERNAL NAME <#=AssemblyName#>_<#=edgeName#>_Assembly.UserDefinedFunctions.<#=edgeName#>Decoder; 
GO

CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_ExclusiveEdgeGenerator(
@PathVarbinary varbinary(max), @nodeid bigint, 
<#for (int i = 0; i < InputCount; i++) {#>
@array<#=i#> varbinary(max), @dele<#=i#> varbinary(max)<# if (i != InputCount - 1) WriteLine(","); #>
<#}#>) RETURNs TABLE
(
	EdgeId int, EdgeColumnId bigint, Sink bigint, _EdgeType nvarchar(max)<#
	for (var i = 0; i < variables.Count; ++i)
	{
		WriteLine(",");
		Write("    " + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
	}
	WriteLine("");
#>
)
  AS EXTERNAL NAME <#=AssemblyName#>_<#=edgeName#>_Assembly.UserDefinedFunctions.<#=edgeName#>ExclusiveEdgeGenerator; 
GO

CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_PathMessageEncoder(
    @nodeType nvarchar(max), @id nvarchar(max),
    @edgeType nvarchar(max)<#for (var i = 0; i < variables.Count; ++i)
    {
        WriteLine(",");
        Write(" @" + variables[i].Item1 + " " + typeDictionary[variables[i].Item2].Item1);
    }
#>)
RETURNS varbinary(max)
AS EXTERNAL NAME <#=AssemblyName#>_<#=edgeName#>_Assembly.UserDefinedFunctions.<#=edgeName#>_PathMessageEncoder; 
GO

CREATE FUNCTION <#=AssemblyName#>_<#=edgeName#>_PathMessageDecoder(
    @array varbinary(max), @nodeType nvarchar(max),
    @id nvarchar(max))
RETURNS nvarchar(max)
AS EXTERNAL NAME <#=AssemblyName#>_<#=edgeName#>_Assembly.UserDefinedFunctions.<#=edgeName#>_PathMessageDecoder; 
GO
<#}#>
<#}#>


<# if (Type == 2) {#>
CREATE ASSEMBLY <#=AssemblyName#>Assembly FROM <#=Path#>
GO

CREATE AGGREGATE <#=AssemblyName#>GlobalNodeIdEncoder
(
	@SrcId bigint
)
RETURNS varbinary(max)
EXTERNAL NAME <#=AssemblyName#>Assembly.GlobalNodeIdEncoder; 
GO
CREATE AGGREGATE <#=AssemblyName#>EdgeIdEncoder
(
	@EdgeId int
)
RETURNS varbinary(max)
EXTERNAL NAME <#=AssemblyName#>Assembly.EdgeIdEncoder; 
GO

CREATE FUNCTION SingletonTable() RETURNS TABLE
(
	memoBit bit
)
as EXTERNAL NAME <#=AssemblyName#>Assembly.UserDefinedFunctions.SingletonTable
GO

CREATE FUNCTION DownSizeFunction
(@id int)
RETURNS INT
AS
 EXTERNAL NAME <#=AssemblyName#>Assembly.UserDefinedFunctions.DownSizeFunction
GO

CREATE FUNCTION UpSizeFunction(@topvalue int) RETURNS TABLE
AS
RETURN
	SELECT TOP(@topvalue) * FROM SingletonTable()
GO
CREATE FUNCTION ConvertNumberIntoBinaryForPath(@a bigint, @b bigint, @c int)
RETURNS varbinary(max)
EXTERNAL NAME <#=AssemblyName#>Assembly.UserDefinedFunctions.ConvertNumberIntoBinaryForPath;
GO
<#}#>